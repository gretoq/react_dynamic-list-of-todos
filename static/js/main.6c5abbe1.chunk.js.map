{"version":3,"sources":["types/FilterByStatus.ts","components/TodoList/TodoList.tsx","components/TodoFilter/options.ts","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","components/utils/handlers.ts","index.tsx"],"names":["FilterByStatus","TodoList","todos","selectedTodoId","onSelect","className","map","todo","id","title","completed","isSelectedTodo","classNames","type","onClick","statusOptions","value","ALL","label","ACTIVE","COMPLETED","TodoFilter","React","memo","statusFilter","queryFilter","onQueryInput","handleFilterSelect","useCallback","event","selectedFilter","target","handlerFilterByQuery","query","handleClearInputField","onChange","option","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","selectedTodo","onClose","useState","user","setUser","isUserLoading","setIsUserLoading","isUserLoaded","setIsUserLoaded","userErrorMessage","setUserErrorMessage","useEffect","fetchUser","a","fetchedUser","handleBackgroundClick","role","tabIndex","href","email","name","App","setTods","isLoaded","setIsLoaded","setSelectedTodo","hasError","setHasError","filterByStatus","setFilterByStatus","filterByQuery","setFilterByQuery","fetchTodos","fetchedTodos","filteredTodos","filter","isFilterByStatus","normalizedTodoTitle","toLowerCase","normalizedQuery","includes","filterTodos","isLoading","hasLoadingError","titleQuery","ReactDOM","render","document","getElementById"],"mappings":"iLAAYA,E,mGCWCC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,eAAgBC,EAA1B,EAA0BA,SAA1B,OACvC,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GACT,IACEC,EAGED,EAHFC,GACAC,EAEEF,EAFFE,MACAC,EACEH,EADFG,UAGIC,EAAiBR,IAAmBK,EAE1C,OACE,qBACE,UAAQ,OACRH,UAAWO,IAAW,CACpB,4BAA6BD,IAHjC,UAOE,oBAAIN,UAAU,eAAd,SACGG,IAGH,oBAAIH,UAAU,eAAd,SACGK,GACC,sBAAML,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UAAWO,IAAW,CACpB,mBAAoBF,EACpB,mBAAoBA,IAHxB,SAMGD,MAIL,oBAAIJ,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVQ,KAAK,SACLC,QAAS,kBAAMV,EAASG,IAJ1B,SAME,sBAAMF,UAAU,OAAhB,SACE,mBACEA,UAAWO,IACT,MACA,CACE,UAAWD,GAEb,CACE,eAAgBA,cAxCvBH,a,SD1CLR,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KEEL,IAAMe,EAAgB,CAC3B,CAAEC,MAAOhB,EAAeiB,IAAKC,MAAO,OACpC,CAAEF,MAAOhB,EAAemB,OAAQD,MAAO,UACvC,CAAEF,MAAOhB,EAAeoB,UAAWF,MAAO,cCQ/BG,EAA8BC,IAAMC,MAAK,YAK/C,IAJLC,EAII,EAJJA,aACApB,EAGI,EAHJA,SACAqB,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAqBC,uBAAY,SACrCC,GAEA,IAAMC,EAAiBD,EAAME,OAAOf,MAEpCZ,EAAS0B,KACR,CAAC1B,IAEE4B,EAAuBJ,uBAAY,SACvCC,GAEA,IAAMI,EAAQJ,EAAME,OAAOf,MAE3BU,EAAaO,KACZ,CAACP,IAEEQ,EAAwBN,uBAAY,WACxCF,EAAa,MACZ,CAACA,IAEJ,OACE,uBAAMrB,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,wBACE,UAAQ,eACRW,MAAOQ,EACPW,SAAUR,EAHZ,SAKGZ,EAAcT,KAAI,SAAA8B,GACjB,IAAQpB,EAAiBoB,EAAjBpB,MAAOE,EAAUkB,EAAVlB,MAEf,OACE,wBAEEF,MAAOA,EAFT,SAIGE,GAHIF,YAWjB,oBAAGX,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRQ,KAAK,OACLR,UAAU,QACVgC,YAAY,YACZrB,MAAOS,EACPU,SAAUH,IAGZ,sBAAM3B,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGf,sBAAMA,UAAU,gBAAgBiC,MAAO,CAAEC,cAAe,OAAxD,SACGd,GACC,wBACE,UAAQ,oBACRZ,KAAK,SACLR,UAAU,SACVS,QAASoB,EACT,aAAW,iCCzEzB,SAASM,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,IAEMC,EAAU,SAACC,GAAD,OAAoBZ,EAAG,iBAAiBY,KCpBlDC,G,MAAmB,kBAC9B,qBAAKhD,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCSNiD,EAA6B,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,QAEvDhD,EAIE+C,EAJF/C,GACA4C,EAGEG,EAHFH,OACA3C,EAEE8C,EAFF9C,MACAC,EACE6C,EADF7C,UAGF,EAAwB+C,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAwCJ,oBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAAgDN,mBAAS,IAAzD,mBAAOO,EAAP,KAAyBC,EAAzB,KAEAC,qBAAU,WACR,IAAMC,EAAS,uCAAG,4BAAAC,EAAA,+EAEYjB,EAAQC,GAFpB,OAERiB,EAFQ,OAIdV,EAAQU,GACRN,GAAgB,GALF,gDAOdE,EAAoB,gDAPN,yBASdJ,GAAiB,GATH,4EAAH,qDAafM,MACC,IAEH,IAAMG,EAAwB1C,uBAAY,WACxC4B,MACC,CAACA,IAEJ,OACE,sBACEnD,UAAU,kBACV,UAAQ,QAFV,UAIE,qBACEA,UAAU,mBACVS,QAASwD,EACTC,KAAK,SACLC,SAAU,EACV,cAAY,SAGbZ,EACC,cAAC,EAAD,IAEA,sBAAKvD,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYG,KAGZ,wBACEK,KAAK,SACLR,UAAU,SACV,UAAQ,cACRS,QAAS0C,EACT,aAAW,mBAIf,qBAAKnD,UAAU,kBAAf,SACGyD,EACC,qCACE,mBAAGzD,UAAU,QAAQ,UAAQ,cAA7B,SACGI,IAGH,oBAAGJ,UAAU,QAAQ,UAAQ,aAA7B,UACGK,EACC,wBAAQL,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAGD,OAED,mBAAGoE,KAAI,wBAAYf,QAAZ,IAAYA,OAAZ,EAAYA,EAAMgB,OAAzB,gBACGhB,QADH,IACGA,OADH,EACGA,EAAMiB,aAKb,mCACGX,GACC,mBAAG3D,UAAU,QAAb,SACE,wBAAQA,UAAU,kBAAlB,SACG2D,iBC7FVY,EAAgB,WAC3B,MAAyBnB,mBAAiB,IAA1C,mBAAOvD,EAAP,KAAc2E,EAAd,KACA,EAAgCpB,oBAAS,GAAzC,mBAAOqB,EAAP,KAAiBC,EAAjB,KACA,EAAwCtB,mBAAsB,MAA9D,mBAAOF,EAAP,KAAqByB,EAArB,KACA,EAAgCvB,mBAAS,IAAzC,mBAAOwB,EAAP,KAAiBC,EAAjB,KAEA,EAGIzB,mBAAyBzD,EAAeiB,KAH5C,mBACEkE,EADF,KAEEC,EAFF,KAIA,EAA0C3B,mBAAS,IAAnD,mBAAO4B,EAAP,KAAsBC,EAAtB,KAkBApB,qBAAU,WACR,IAAMqB,EAAU,uCAAG,4BAAAnB,EAAA,+EHvBO5B,EAAY,UGuBnB,OAETgD,EAFS,OAIfX,EAAQW,GACRT,GAAY,GALG,gDAOfG,EAAY,yCAPG,yDAAH,qDAWhBK,MACC,IAEH,IAAME,ECvDmB,SACzBvF,EACAiF,EACAE,GAEA,OAAOnF,EAAMwF,QAAO,SAAAnF,GAClB,IAAIoF,GAAmB,EACjBC,EAAsBrF,EAAKE,MAAMoF,cACjCC,EAAkBT,EAAcQ,cAEtC,OAAQV,GACN,KAAKnF,EAAemB,OAClBwE,GAAoBpF,EAAKG,UACzB,MAEF,KAAKV,EAAeoB,UAClBuE,EAAmBpF,EAAKG,UAO5B,OAAOiF,GAAoBC,EAAoBG,SAASD,MDgCpCE,CAAY9F,EAAOiF,EAAgBE,GAEnDY,GAAanB,IAAaG,EAC1BiB,GAAmBpB,GAAYG,EAErC,OACE,qCACE,qBAAK5E,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAACgB,EAAD,CACEG,aAAc2D,EACd/E,SA1CgB,SAAC0B,GAC7BsD,EAAkBtD,IA0CNL,YAAa4D,EACb3D,aAhDe,SAACyE,GAC5Bb,EAAiBa,QAmDT,sBAAK9F,UAAU,QAAf,UACG4F,GAAa,cAAC,EAAD,IAEbC,GACC,mBAAG7F,UAAU,kBAAb,SACG4E,IAIJH,GACC,cAAC,EAAD,CACE5E,MAAOuF,EACPtF,eAAc,OAAEoD,QAAF,IAAEA,OAAF,EAAEA,EAAc/C,GAC9BJ,SAzDU,SAACG,GACzByE,EAAgBzE,gBAgEbgD,GACC,cAAC,EAAD,CACEA,aAAcA,EACdC,QAhEkB,WACxBwB,EAAgB,aErCpBoB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6c5abbe1.chunk.js","sourcesContent":["export enum FilterByStatus {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  selectedTodoId?: number,\n  onSelect: (todo: Todo) => void\n}\n\nexport const TodoList: React.FC<Props> = ({ todos, selectedTodoId, onSelect }) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const {\n          id,\n          title,\n          completed,\n        } = todo;\n\n        const isSelectedTodo = selectedTodoId === id;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': isSelectedTodo,\n            })}\n            key={id}\n          >\n            <td className=\"is-vcentered\">\n              {id}\n            </td>\n\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n              >\n                {title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onSelect(todo)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames(\n                      'far',\n                      {\n                        'fa-eye': !isSelectedTodo,\n                      },\n                      {\n                        'fa-eye-slash': isSelectedTodo,\n                      },\n                    )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { FilterByStatus } from '../../types/FilterByStatus';\n\nexport const statusOptions = [\n  { value: FilterByStatus.ALL, label: 'All' },\n  { value: FilterByStatus.ACTIVE, label: 'Active' },\n  { value: FilterByStatus.COMPLETED, label: 'Completed' },\n];\n","import React, { useCallback } from 'react';\n\nimport { FilterByStatus } from '../../types/FilterByStatus';\n\nimport { statusOptions } from './options';\n\ninterface Props {\n  statusFilter: FilterByStatus,\n  onSelect: (selectedFilter: FilterByStatus) => void\n  queryFilter: string,\n  onQueryInput: (title: string) => void,\n}\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  statusFilter,\n  onSelect,\n  queryFilter,\n  onQueryInput,\n}) => {\n  const handleFilterSelect = useCallback((\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    const selectedFilter = event.target.value as FilterByStatus;\n\n    onSelect(selectedFilter);\n  }, [onSelect]);\n\n  const handlerFilterByQuery = useCallback((\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const query = event.target.value;\n\n    onQueryInput(query);\n  }, [onQueryInput]);\n\n  const handleClearInputField = useCallback(() => {\n    onQueryInput('');\n  }, [onQueryInput]);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={statusFilter}\n            onChange={handleFilterSelect}\n          >\n            {statusOptions.map(option => {\n              const { value, label } = option;\n\n              return (\n                <option\n                  key={value}\n                  value={value}\n                >\n                  {label}\n                </option>\n              );\n            })}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={queryFilter}\n          onChange={handlerFilterByQuery}\n        />\n\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {queryFilter && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearInputField}\n              aria-label=\"Clear input field\"\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n});\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { getUser } from '../../api';\n\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\nimport { Loader } from '../Loader';\n\ninterface Props {\n  selectedTodo: Todo,\n  onClose: () => void,\n}\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, onClose }) => {\n  const {\n    id,\n    userId,\n    title,\n    completed,\n  } = selectedTodo;\n\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoading, setIsUserLoading] = useState(true);\n  const [isUserLoaded, setIsUserLoaded] = useState(false);\n  const [userErrorMessage, setUserErrorMessage] = useState('');\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const fetchedUser = await getUser(userId);\n\n        setUser(fetchedUser);\n        setIsUserLoaded(true);\n      } catch {\n        setUserErrorMessage('Load data is failed. Please try again later.');\n      } finally {\n        setIsUserLoading(false);\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  const handleBackgroundClick = useCallback(() => {\n    onClose();\n  }, [onClose]);\n\n  return (\n    <div\n      className=\"modal is-active\"\n      data-cy=\"modal\"\n    >\n      <div\n        className=\"modal-background\"\n        onClick={handleBackgroundClick}\n        role=\"button\"\n        tabIndex={0}\n        aria-hidden=\"true\"\n      />\n\n      {isUserLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n              aria-label=\"Close modal\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            {isUserLoaded ? (\n              <>\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {completed ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  ) : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n\n                  {' by '}\n\n                  <a href={`mailto:${user?.email}`}>\n                    {user?.name}\n                  </a>\n                </p>\n              </>\n            ) : (\n              <>\n                {userErrorMessage && (\n                  <p className=\"block\">\n                    <strong className=\"has-text-danger\">\n                      {userErrorMessage}\n                    </strong>\n                  </p>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\n\nimport { Todo } from './types/Todo';\nimport { FilterByStatus } from './types/FilterByStatus';\nimport { filterTodos } from './components/utils/handlers';\n\nexport const App: React.FC = () => {\n  const [todos, setTods] = useState<Todo[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [hasError, setHasError] = useState('');\n\n  const [\n    filterByStatus,\n    setFilterByStatus,\n  ] = useState<FilterByStatus>(FilterByStatus.ALL);\n  const [filterByQuery, setFilterByQuery] = useState('');\n\n  const handlerFilterByQuery = (titleQuery: string) => {\n    setFilterByQuery(titleQuery);\n  };\n\n  const handlerFilterByStatus = (selectedFilter: FilterByStatus) => {\n    setFilterByStatus(selectedFilter);\n  };\n\n  const handlerTodoSelect = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const handlerCloseModal = () => {\n    setSelectedTodo(null);\n  };\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const fetchedTodos = await getTodos();\n\n        setTods(fetchedTodos);\n        setIsLoaded(true);\n      } catch {\n        setHasError('Load data is failed. Try again later.');\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  const filteredTodos = filterTodos(todos, filterByStatus, filterByQuery);\n\n  const isLoading = !isLoaded && !hasError;\n  const hasLoadingError = !isLoaded && hasError;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                statusFilter={filterByStatus}\n                onSelect={handlerFilterByStatus}\n                queryFilter={filterByQuery}\n                onQueryInput={handlerFilterByQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              {hasLoadingError && (\n                <p className=\"has-text-danger\">\n                  {hasError}\n                </p>\n              )}\n\n              {isLoaded && (\n                <TodoList\n                  todos={filteredTodos}\n                  selectedTodoId={selectedTodo?.id}\n                  onSelect={handlerTodoSelect}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onClose={handlerCloseModal}\n        />\n      )}\n    </>\n  );\n};\n","import { FilterByStatus } from '../../types/FilterByStatus';\nimport { Todo } from '../../types/Todo';\n\nexport const filterTodos = (\n  todos: Todo[],\n  filterByStatus: FilterByStatus,\n  filterByQuery: string,\n): Todo[] => {\n  return todos.filter(todo => {\n    let isFilterByStatus = true;\n    const normalizedTodoTitle = todo.title.toLowerCase();\n    const normalizedQuery = filterByQuery.toLowerCase();\n\n    switch (filterByStatus) {\n      case FilterByStatus.ACTIVE:\n        isFilterByStatus = !todo.completed;\n        break;\n\n      case FilterByStatus.COMPLETED:\n        isFilterByStatus = todo.completed;\n        break;\n\n      default:\n        break;\n    }\n\n    return isFilterByStatus && normalizedTodoTitle.includes(normalizedQuery);\n  });\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}